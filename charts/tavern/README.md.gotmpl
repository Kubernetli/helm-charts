# Jira Software
{{ template "chart.deprecationWarning" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}


The chart is under active development and may contain bugs/unfinished documentation. Any testing/contributions are welcome! :)


{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{/*
  Chart Maintainers
*/}}
{{ template "chart.maintainersSection" . }}

{{/*
  Chart Sources
*/}}
{{ template "chart.sourcesSection" . }}

{{/*
  Chart Requirements
*/}}
{{ template "chart.requirementsSection" . }}

# Major Changes

Major Changes to functions are documented with the version affected. **Before upgrading the dependency version, check this section out!**

| **Change** | **Chart Version** | **Description** | **Commits/PRs** |
| :--------- | :---------------- | :-------------- | :-------------- |
|||||

{{/*
  Chart Values
*/}}
{{ template "chart.valuesSection" . }}


# Implementing Tests




## Using Templates

This chart provides the functionality to create templates, which can be rereferenced. The templates allow you to implement go sprig logic and therefor might dramatically improve your tavern test suites.

### Stage

Tavern Stage templates are defined under the `$.Values.stageTemplates` key. You can define as many templates as you want below this key, just use the following semantic:

```
stageTemplates:

  ## Tavern template Name (Required)
- name: "stagetplname"

  ## Local Variables
  values:
    constant_url: "https://google.com"

  ## Here goes your tavern stage template
  template: |
    request:
      url: '{{ $.tavern.constant_url }}/{{ default "/user" $.tavern.endpoint | trimAll "/" }}'
      method: GET
      auth:
        - "{tavern.env_vars.BASIC_AUTH_USER}"
        - "{tavern.env_vars.BASIC_AUTH_PASSWD}"
      headers:
        content-type: "application/json"
    response:
      status_code:
        - 200
        - 301

  ## Tavern template Name (Required)
- name: "stagetplname2"

  ## Here goes your tavern stage template
  template: |
...
```

#### Reference

Referencing in a tavern test suite (same goes for test suite templates):

```
tests:
- name: "Simple Suite"
  values:
    endpoint: "products"
  test:
    stages:

      # Single Tavern Stage for Suite (Will be last stage to be executed)
      - name: "Test Stage"
        template: "stagetplname"
        values:
          endpoint: "products"
        stage:
          response:
            status_code:
              - 404
```

### Test Suites







# Tavern Concepts

To get to know to how tavern works, I recommend checking up their documentation on key concepts:

  * [https://tavern.readthedocs.io/en/latest/basics.html#](https://tavern.readthedocs.io/en/latest/basics.html#)

This will get you an idea on how to work with tavern.

## Traps

There's some things to note about tavern:

  * The name of Tavern test files must follow this syntax: `test_<custom_name>.tavern.yaml`. Otherwise tavern won't run any tests from this file.

## Environment Variables

There are different ways to reference external values within a tavern test suite. To reference environment variables:

```
...
  json:
    user: "{tavern.env_vars.BASIC_AUTH_USER}"
...
```

`BASIC_AUTH_USER` represents a environment variable.

Further explanation: [https://tavern.readthedocs.io/en/latest/basics.html#environment-variables](https://tavern.readthedocs.io/en/latest/basics.html#environment-variables)

## External Scripts

Tavern Jobs support by default the inclusion of external scripts. The easiest way to add scripts to your tavern instance is by mounting it into the `/scripts` directory within the container. The directory is already part of the `PYTHONPATH` and have the correct permissions.


## Includes

Currently no `!include` statements are supported for external files. We recommend using Environment Variables instead.

```
includes:
- !include common.yaml
```

The !include statement is removed by the go sprig toYaml function. Therefor it's not suppported yet. If you have a solution to this, create an Issue/PR.

## Examples

See the [Examples](./examples) to get a better idea, of how tests could look like.
