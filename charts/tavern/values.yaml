## Global Values
##
global:

  ## Global Docker Image Registry
  # global.imageRegistry -- Global Docker Image Registry declaration. Will overwrite all child .registry fields.
  imageRegistry: ""

  ## Global Docker Image PullPolicy
  # global.imagePullPolicy -- Global Docker Image Pull Policy declaration. Will overwrite all child .pullPolicy fields.
  imagePullPolicy: ""

  ## Global Image Pull Secrets
  # global.imagePullSecrets -- Global Docker Image Pull Secrets declaration. Added to local Docker Image Pull Secrets.
  imagePullSecrets: []

## Tavern Configuration
##
tavern:

  ## Tavern Test Directory
  # tavern.test_directory -- Directory where all your tests are mounted
  test_directory: "/tavern"

  ## Tavern Debug Mode
  # tavern.debug -- Enables logging on DEBUG level
  debug: false

  ## Tavern Default Mount Mode
  # tavern.defaultMode -- Default File mode for Test Suite mounts
  defaultMode: "0550"

  ## Tavern as Cronjob
  # tavern.asCronjob -- Runs Tavern as Cronjob, instead of Job
  asCronjob: false


## Extra Resources
# extraResources -- Enter Extra Resources managed by the release
extraResources: []


## Common Values
##

## Overwrite Name Template
# nameOverride -- Overwrite "lib.internal.common.name" output
nameOverride: ""

## Overwrite Fullname Template
# fullnameOverride -- Overwrite `lib.utils.common.fullname` output
fullnameOverride: ""

## Common Labels
# commonLabels -- Common Labels are added to each kubernetes resource manifest.
commonLabels: {}

## Overwrite Labels
# overwriteLabels -- Overwrites default labels, but not resource specific labels and common labels
overwriteLabels: {}

## Selector Labels
# selectorLabels -- Define default [selectorLabels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
selectorLabels: {}

## Version Capabilities
# kubeCapabilities -- Overwrite the Kube GitVersion
# @default -- `$.Capabilities.KubeVersion.GitVersion`
kubeCapabilities: ""


## Proxy Values
##
proxy:

  ## HTTP Proxy Configuration
  httpProxy:

    ## HTTP Proxy Host Configuration
    # proxy.httpProxy.host -- Configure HTTP Proxy Hostname/IP (without protocol://)
    host: ""

    ## HTTP Proxy Port Configuration
    # proxy.httpProxy.port -- (int) Configure HTTP Proxy Port
    port:

    ## HTTP Proxy Protocol Configuration
    # proxy.httpProxy.protocol -- Configure HTTP Proxy Protocol (http/https)
    # @default -- http
    protocol: ""

  ## HTTPS Proxy Configuration
  httpsProxy:

    ## HTTPS Proxy Host Configuration
    # proxy.httpsProxy.host -- Configure HTTPS Proxy Hostname/IP (without protocol://)
    host: ""

    ## HTTP Proxy Port Configuration
    # proxy.httpsProxy.port -- (int) Configure HTTPS Proxy Port
    port:

    ## HTTP Proxy Protocol Configuration
    # proxy.httpsProxy.protocol -- Configure HTTPS Proxy Protocol (http/https)
    # @default -- http
    protocol: ""

  ## No Proxy Hosts Configuration
  # proxy.noProxy -- Configure No Proxy Hosts
  # noProxy: [ "localhost", "127.0.0.1" ]
  noProxy: []

## Define Container Timezone
# timezone -- Define Container Timezone (Sets TZ Environment)
timezone: "Europe/Zurich"


## Tavern Test Configuration
##

## Test Stage Templates
# stageTemplates -- Tavern Test Stage Templates (See the examples)
stageTemplates: []
#
#  Stage Template Name
#  stageTemplates[0].name -- Stage Template Name
#  - name: "http_basic"
#
#  Stage Template Values
#  stageTemplates[0].values -- Go Sprig Values accessible under `$.tavern` in the template
#    values:
#      endpoint: "here"
#
#  Stage Tavern Template
#  stageTemplates[0].template -- Multiline key containing tavern stage template
#    template: |
#      request:
#        url: "{host}/users/{{ $.tavern.endpoint }}"
#        verify: false
#        method: GET
#        auth:
#          - "{tavern.env_vars.BASIC_AUTH_USER}"
#          - "{tavern.env_vars.BASIC_AUTH_PASSWD}"
#        json:
#          test: true
#        headers:
#          content-type: application/json
#      response:
#        status_code:
#          - 200
#          - 404
#

## Test Suite Templates
# testTemplates -- Tavern Test Suite Templates (See the examples)
testTemplates: []
#
#  Test Suite Template Name
#  testTemplates[0].name -- Suite Template Name (Required)
#  - name: "http_stage"
#
#  Test Suite Template Values
#  testTemplates[0].values -- Go Sprig Values accessible under `$.tavern` in the template
#    values:
#      test_products: true
#
#  Tavern Test Suite Template
#  testTemplates[0].template -- Multiline key containing tavern test suite template
#    template: |
#
#      stages:
#
#        ## Straight Test
#        - name: "Direct Test"
#          stage:
#            request:
#              url: "{host}/users/joebloggs"
#              method: GET
#            response:
#              status_code:
#                - 200
#                - 404
#
#        ## Include Stage Templates
#        - name: "user_test"
#          template: "http_basic"
#          values:
#            endpoint: "users"
#          stage:
#            request:
#              verify: true
#
#        ## Use Go Sprig Logic to render Template
#        {{- if $.tavern.test_products }}
#        - name: "product_test"
#          template: "http_basic"
#          values:
#            endpoint: "Products"
#          json:
#            showAll: true
#        {{- end }}
#


## Test Suites
# tests -- Tavern Test Suites which will be executed
tests: []
#
# Simple Test Suite
# Does not use Test Suite Template, but Stage Template
#
#  Test Suite Name
#  tests[0].name -- Test Suite Name
#  - name: "Sample Suite"
#
#  Stores Test Suite in Secret instead of configmap
#  tests[0].secret -- Test Suite Secret
#    secret: true
#
#  Test Suite Values
#  tests[0].values -- Go Sprig Values accessible under `$.tavern` for the entire Suite
#    values:
#      enable_products: true
#
#  Tavern Test Suite Definition
#
#
#    test:
#      stages:
#
#        ## Straight Test
#        - name: "Try to get user"
#          stage:
#            request:
#              url: "{host}/users/joebloggs"
#              method: GET
#              json:
#                clusterName: "test"
#            response:
#              status_code:
#                - 200
#                - 404
#
#
#        ## Use Template
#        - name: "Some Stage"
#          template: "http_basic"
#          priority: 10
#          values:
#            endpoint: "Products"
#          stage:
#            request:
#              verify: true
#
#
# ## Template Suite
#
#    Test Suite Name
#    tests[1].name -- Test Suite Name
#  - name: "Template Suite"
#
#    Reference the Test Suite template to use
#    tests[1].template -- Test Suite Secret
#    template: "http_stage"
#
#    Stores Test Suite in Secret instead of configmap
#    tests[1].secret -- Test Suite Secret
#
#    Test Suite Values
#    tests[1].values -- Go Sprig Values accessible under `$.tavern` for the entire Suite
#    values:
#      enable_products: true
#
#    ## Tavern Test Definition
#    test:
#      stages:
#        - name: "test_name"
#          stage:
#            test: "me"
#
#    ## Overwrites the stages in the template and executes a merge
#        - name: "user_test"
#          stage:
#            request:
#              verify: true
#

#
# Simple Test Suite
# Does not use Test Suite Template, but Stage Template
#
#  Test Suite Name
#  tests[2].name -- Test Suite Name
#  - name: "Sample Suite"
#
#  Stores Test Suite in Secret instead of configmap
#  tests[2].secret -- Test Suite Secret
#    secret: true
#
#  Test Suite Values
#  tests[2].values -- Go Sprig Values accessible under `$.tavern` for the entire Suite
#    values:
#      enable_products: true
#
#  Tavern Test Suite Definition
#
#
#    test:
#      stages:
#
#        ## Straight Test
#        - name: "Try to get user"
#          stage:
#            request:
#              url: "{host}/users/joebloggs"
#              method: GET
#              json:
#                clusterName: "test"
#            response:
#              status_code:
#                - 200
#                - 404
#
#
## Vanilla Test
# Don't allow templating but support special statements like `!include` which won't be templated.
#
#  Test Suite Name
#  tests[3].name -- Test Suite Name
#  - name: "vanilla_test"
#
#  Test Vanilla
#  tests[3].name -- Test Suite Name
#    vanilla: true
#
#  Stores Test Suite in Secret instead of configmap
#  tests[3].secret -- Test Suite Secret
#    secret: true
#
# Tavern test definition
#    test: |
#      test_name: Make sure cookie is required to log in
#
#      includes:
#        - !include common.yaml
#
#      stages:
#        - name: Try to check user info without login information
#          request:
#            url: "{host}/userinfo"
#            method: GET
#          response:
#            status_code: 401
#            json:
#              error: "no login information"
#            headers:
#              content-type: application/json




## CronJob/Job Configuration
##
job:

  ## CronJob Enable
  # job.enabled -- Enable CronJob Resource
  enabled: true

  ## CronJob API version
  # job.apiVersion -- Configure the api version used for the CronJob resource.
  apiVersion: ""

  ## CronJob Labels
  # job.labels -- Configure CronJob additional Labels
  labels: {}

  ## CronJob Annotations
  # job.annotations -- Configure CronJob Annotations
  annotations: {}

  ## CronJob ConcurrencyPolicy
  # job.concurrencyPolicy -- Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one.
  concurrencyPolicy:

  ## CronJob failedJobsHistoryLimit
  # job.failedJobsHistoryLimit -- The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
  failedJobsHistoryLimit: 1

  ## CronJob Schedule
  # job.schedule -- The schedule in Cron format, see https://crontab.guru/.
  schedule: "0 * * * *"

  ## CronJob startingDeadlineSeconds
  # job.startingDeadlineSeconds -- Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones.
  startingDeadlineSeconds:

  ## CronJob successfulJobsHistoryLimit
  # job.successfulJobsHistoryLimit -- The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
  # @default -- 3
  successfulJobsHistoryLimit:

  ## CronJob Suspend
  # job.suspend -- The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
  # @default -- false
  suspend:


  ## Pod Configuration
  ## https://github.com/bedag/helm-charts/tree/master/charts/manifests/templates/manifests/README.md#container-template#job-template
  ## Full Configuration

  ## Job activeDeadlineSeconds
  # job.activeDeadlineSeconds -- (int) Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer.
  activeDeadlineSeconds:

  ## Job backoffLimit
  # job.backoffLimit -- (int) Specifies the number of retries before marking this job failed.
  # @default -- 6
  backoffLimit:

  ## Job Completions
  # job.completions -- (int) Specifies the desired number of successfully finished pods the job should be run with [More Info](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/).
  completions:

  ## Job Parallelism
  # job.parallelism -- (int) manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing.
  parallelism:

  ## Job Selector
  # job.selector -- A label query over pods that should match the pod count. Normally, the system sets this field for you.
  selector:
    {}

  ## Job ttlSecondsAfterFinished
  # job.ttlSecondsAfterFinished -- ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed).
  ttlSecondsAfterFinished:

  ## Job ExtraFields
  # job.extraFields -- Extra fields used on the Job resource
  extraFields:
    {}
  #  manualSelector: true


  ## Pod Configuration
  ## https://github.com/bedag/helm-charts/tree/master/charts/manifests/templates/manifests/README.md#container-template#pod-template
  ## Full Configuration

  ## Image Pull Secrets
  # job.imagePullSecrets -- Define [ImagePullSecrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/). Will be overwritten if set by global variable.
  imagePullSecrets: []

  ## Pod Labels
  # job.podLabels -- Pod [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) are only added for the pod
  podLabels: {}

  ## Pod Annotations
  # job.podAnnotations -- Pod [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) are only added for the pod
  podAnnotations: {}

  ## Pod ForceRedeploy
  ## job.forceRedeploy -- Adds timestamp annotation, causing your pods to be redeployed everytime a new release applied.
  forceRedeploy: false

  ## Extra Pod Fields
  # job.podFields -- Add extra field to the [Pod Template](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#podtemplate-v1-core) if not available as value.
  podFields: {}
  #  hostNetwork: true

  ## Additional Kubernetes Volumes
  # job.volumes -- Additional [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/)
  volumes: []
  #  - name: cache
  #    emptyDir: {}
  #  - name: share
  #    persistentVolumeClaim:
  #      claimName: 'gen-tavern-shared'

  ## RestartPolicy Configuration
  # job.restartPolicy -- Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
  restartPolicy: OnFailure

  ## Affinity Configuration
  # job.affinity -- Pod [Affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
  affinity: {}

  ## NodeSelector Configuration
  # job.nodeSelector -- Pod [NodeSelector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/)
  nodeSelector: {}

  ## Tolerations Configuration
  # job.tolerations -- Pod [Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: {}

  ## Priority Configuration
  # job.priorityClassName -- Pod [priorityClassName](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass)
  priorityClassName: ""

  ## Pod SecurityContext Configuration
  # job.podSecurityContext -- Pod [SecurityContext](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
  podSecurityContext:
    runAsUser: 1500
    runAsGroup: 1500
    fsGroup: 1500

  ## Pod Initcontainers
  # job.initContainers -- Pod [initContainers](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)
  initContainers: []
  #  - name: init-myservice
  #    image: busybox:1.28
  #    command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

  ## Pod SideCar Containers
  # job.sidecars -- Allows to add sidecars to your [maincar]](https://kubernetes.io/docs/concepts/workloads/pods/#using-pods)
  sidecars: []

  #
  ## - ServiceAccount
  ## Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ## API Reference: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#serviceaccount-v1-core
  ##
  serviceAccount:

    ## ServiceAccount Creation
    # job.serviceAccount.enabled -- Specifies whether a service account is enabled or not
    enabled: false

    ## ServiceAccount Creation
    # job.serviceAccount.create -- Specifies whether a service account should be created
    create: false

    ## ServiceAccount API version
    # job.serviceAccount.apiVersion -- Configure the api version used
    # @default -- v1
    apiVersion: ""

    ## ServiceAccount Labels
    # job.serviceAccount.labels -- Merges given labels with common labels
    labels: {}

    ## ServiceAccount Annotations
    # job.serviceAccount.annotations -- Annotations to add to the service account
    annotations: {}

    ## ServiceAccount Auto Mount Service Token
    # job.serviceAccount.automountServiceAccountToken -- (bool) AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted.
    automountServiceAccountToken: true

    ## ServiceAccount Image pull secrets
    # job.serviceAccount.imagePullSecrets -- ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount.
    imagePullSecrets: []

    ## ServiceAccount Global PullSecrets
    # job.serviceAccount.globalPullSecrets -- Evaluate global set pullsecrets and mount, if set
    globalPullSecrets: false

    ## ServiceAccount Secrets
    # job.serviceAccount.secrets -- Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount
    secrets: []

    ## ServiceAccount Name
    # job.serviceAccount.name -- If not set and create is true, a name is generated using the fullname template
    # @default -- `bedag-lib.fullname`
    name: ""


  ## Container Configuration
  ## https://github.com/bedag/helm-charts/tree/master/charts/manifests/templates/manifests/README.md#container-template#container-template
  ## Full Configuration


  #
  ## -- Container
  ## Reference: https://kubernetes.io/de/docs/concepts/containers/
  ## Container API Object - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#container-v1-core
  #

  ## Custom Container Name
  # job.containerName -- Configure Container Name
  # @default -- `.Chart.Name`
  containerName:

  ## Docker Image definition.
  image:
    # job.image.registry -- Configure Docker Registry. Will be overwritten if set by global variable.
    registry: docker.io

    # job.image.repository -- Configure Docker Repository
    repository: buttahtoast/docker-tavern

    # job.image.pullPolicy -- Configure Docker Pull Policy. Will be overwritten if set by global variable.
    pullPolicy:

    # job.image.tag -- Configure Docker Image tag
    # @default -- Tag defaults to `.Chart.Appversion`, if not set
    tag:

  ## Container Resources
  # job.resources -- Configure Container [Resource](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    {}
  #  requests:
  #    memory: "64Mi"
  #    cpu: "250m"
  #  limits:
  #    memory: "128Mi"
  #    cpu: "500m"

  ## Container Command
  # job.command -- Configure executed container command
  command:
    {}

  ## Container Command Args
  # job.args -- Configure arguments for executed command
  args:
    {}

  ## Environment Variables
  # job.environment -- Configure Environment Variables (Refer to values.yaml)
  environment:
    {}
  # - name: "MY_ENV"
  #   value: "someValue"
  #   secret: true
  # - name: SOME_SPEC
  #   valueFrom:
  #     fieldRef:
  #       fieldPath: spec.*
  #

  ## Container Ports
  # job.ports -- Configure Container Ports
  ports:
    []
  # - name: "health"
  #   containerPort: 9090
  #   protocol: TCP

  ## Additional Volume Mounts
  # job.volumeMounts -- Configure Container [volumeMounts](https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/)
  volumeMounts:
    []
  #  - name: "cache"
  #    mountPath: /cache
  #  - name: "share"
  #    mountPath: /var/data/share

  ## Container SecurityContext
  # job.securityContext -- Container [SecurityContext](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
  securityContext:
    {}

  ## ReadinessProbe Configuration
  # job.readinessProbe -- Container [ReadinessProbe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes)
  readinessProbe:
    {}
  #  httpGet:
  #    path: /health
  #    port: http
  #  initialDelaySeconds: 60

  ## LivenessProbe Configuration
  # job.livenessProbe -- Container [LivenessProbe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-command)
  livenessProbe:
    {}
  #  httpGet:
  #    path: /health
  #    port: http
  #  initialDelaySeconds: 60

  ## StartupProbe Configuration
  # job.startupProbe -- Container [StartupProbe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes)
  startupProbe:
    {}
  #  httpGet:
  #    path: /health
  #    port: http
  #  failureThreshold: 30
  #  periodSeconds: 10

  ## Container Lifecycle Hooks
  # job.lifecycle -- Container [Lifecycle](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/)
  lifecycle:
    {}
  #  postStart:
  #    exec:
  #      command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]

  ## Container ExtraFields
  # job.containerFields -- Extra fields used on the container definition
  containerFields:
    {}
  #  stdinOnce: true
